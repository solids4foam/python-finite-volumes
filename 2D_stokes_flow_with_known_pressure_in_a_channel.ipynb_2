{
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "%pip install pyevtk"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3n3M6qVyOBsS",
        "outputId": "61cbe833-282f-447a-b771-388201ab1571"
      },
      "id": "3n3M6qVyOBsS",
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pyevtk in /usr/local/lib/python3.7/dist-packages (1.5.0)\n",
            "Requirement already satisfied: numpy>=1.8.0 in /usr/local/lib/python3.7/dist-packages (from pyevtk) (1.21.6)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "3bdf423c",
      "metadata": {
        "id": "3bdf423c"
      },
      "outputs": [],
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import scipy\n",
        "from scipy.sparse import csr_matrix\n",
        "from scipy.sparse.linalg import spsolve\n",
        "import time\n",
        "from math import pi, sinh, sin,sqrt,floor\n",
        "from pyevtk.hl import gridToVTK \n",
        "\n",
        "\n",
        "# from sympy import symbols, sin, sinh, pi, latex  - commented as other functions reading sin, etc. as symbols when \n",
        "# calculating\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a7766260",
      "metadata": {
        "id": "a7766260"
      },
      "source": [
        "## Solves steady state momentum equation"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bea8b838",
      "metadata": {
        "id": "bea8b838"
      },
      "source": [
        "velocity prescribed at inlet. Neumann condition at outlet"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "77f5b183",
      "metadata": {
        "id": "77f5b183"
      },
      "outputs": [],
      "source": [
        "def CFD(Lx,Ly,Nx,Ny,vis,vl,vr,vt,vb,rho,gradP):\n",
        "    #grid spacing\n",
        "    dx = Lx/Nx\n",
        "    dy = Ly/Ny\n",
        "    #Calculate coefficients\n",
        "    #east and west face coefficients equal i.e. along x direction\n",
        "    ax = vis*dy/dx\n",
        "    #north and south face coefficients equal i.e. along y direction\n",
        "    ay = vis*dx/dy\n",
        "    \n",
        "    ap = -2*(ax+ay)\n",
        "    \n",
        "    dim = 2 #2 dimensions (x and y)\n",
        "    # total number of cells\n",
        "    M = int(Nx*Ny)\n",
        "    #Initialise temperature vector\n",
        "    v = np.zeros((dim*M, 1))\n",
        "    \n",
        "    #Initialise source vector\n",
        "    b = np.zeros((dim*M, 1))\n",
        "    \n",
        "    #Initialise coefficient matrix\n",
        "    A = np.zeros((dim*M, dim*M))\n",
        "    \n",
        "    kP = (1/rho)*gradP*dx*dy\n",
        "#     print(kP)\n",
        "    # 6 coeffs on each corner + 8 coeffs on each cell attached to a side\n",
        "    #+10 coeffs on each internal cell\n",
        "    internalandcorner = 6*4+10*(Nx-2)*(Ny-2)\n",
        "    sides =  8*(2*Nx+2*Ny-8)\n",
        "    numNonZeros = internalandcorner+sides\n",
        "    \n",
        "    data = np.zeros((numNonZeros))\n",
        "    row_idx = np.zeros((numNonZeros ))\n",
        "    col_idx = np.zeros((numNonZeros ))\n",
        "    #get indices of corner cells\n",
        "    botright = 2*(Nx-1)\n",
        "    topleft = 2*(Nx*(Ny-1))\n",
        "    topright = 2*(Nx*Ny-1)\n",
        "    #Loop through each cell i\n",
        "    coeffi=0\n",
        "    #Loop through each cell i\n",
        "    for i in range(0, 2*M, 2):\n",
        "        #CORNERS\n",
        "        #bottom left...  Te and Tn unknown, Tw and Tb known (at boundary)\n",
        "        if i == 0:\n",
        "            #compute constant for this equation\n",
        "            b[i] = -2*ay*vb[0]-2*ax*vl[0] +kP[0]\n",
        "            b[i+1] = -2*ay*vb[1]-2*ax*vl[1] +kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -3*ax-3*ay  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -3*ax-3*ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #east x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2\n",
        "            \n",
        "            #east y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+3\n",
        "            \n",
        "            coeffi+=2\n",
        "            #north x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2*Nx\n",
        "            \n",
        "            #north y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+2*Nx+1\n",
        "         \n",
        "            coeffi+=2\n",
        "        #bottom right\n",
        "        elif i == botright:\n",
        "            #compute constant for this equation\n",
        "            b[i] = -2*ay*vb[0]+kP[0]\n",
        "            b[i+1] = -2*ay*vb[1] +kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -ax -3*ay\n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -ax-3*ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #west x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2\n",
        "            \n",
        "            #west y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #north x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2*Nx\n",
        "            \n",
        "            #north y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+2*Nx+1\n",
        "         \n",
        "            coeffi+=2\n",
        "        #top left\n",
        "        elif i == topleft:\n",
        "            #compute constant for this equation\n",
        "            b[i] = -2*(ay*vt[0]+ax*vl[0])+kP[0]\n",
        "            b[i+1] = -2*(ay*vt[1]+ax*vl[1])+kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -3*ax-3*ay  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -3*ax-3*ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #east x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2\n",
        "            \n",
        "            #east y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+3\n",
        "            \n",
        "            coeffi+=2\n",
        "            #south x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2*Nx\n",
        "            \n",
        "            #south y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-2*Nx+1\n",
        "         \n",
        "            coeffi+=2\n",
        "        #top right\n",
        "        elif i == topright:\n",
        "            #compute constant for this equation\n",
        "            b[i] = -2*ay*vt[0]+kP[0]\n",
        "            b[i+1] = -2*ay*vt[1]+kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -ax -3*ay  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -ax-3*ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #west x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2\n",
        "            \n",
        "            #west y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #south x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2*Nx\n",
        "            \n",
        "            #south y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        "        \n",
        "        #SIDES\n",
        "        #bottom\n",
        "        elif 0 < i < botright:\n",
        "            #compute constant for this equation\n",
        "            b[i] = -2*ay*vb[0]+kP[0]\n",
        "            b[i+1] = -2*ay*vb[1]+kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -2*ax -3*ay  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -2*ax -3*ay\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #east x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2\n",
        "            \n",
        "            #east y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+3\n",
        "            \n",
        "            coeffi+=2\n",
        "            #west x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2\n",
        "            \n",
        "            #west y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-1\n",
        "            coeffi+=2\n",
        "            \n",
        "            #north x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2*Nx\n",
        "            \n",
        "            #north y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        "         \n",
        "        #top\n",
        "        elif topleft < i < topright:\n",
        "            #compute constant for this equation\n",
        "            b[i] = -2*ay*vt[0]+kP[0]\n",
        "            b[i+1] = -2*ay*vt[1]+kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -2*ax -3*ay  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -2*ax -3*ay\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #east x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2\n",
        "            \n",
        "            #east y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+3\n",
        "            \n",
        "            coeffi+=2\n",
        "            #west x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2\n",
        "            \n",
        "            #west y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-1\n",
        "            coeffi+=2\n",
        "            \n",
        "            #south x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2*Nx\n",
        "            \n",
        "            #south y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "        #left\n",
        "        elif i in range(2*Nx,topleft,2*Nx):\n",
        "            #compute constant for this equation\n",
        "            b[i] = -2*ax*vl[0]+kP[0]\n",
        "            b[i+1] = -2*ax*vl[1]+kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -3*ax -2*ay  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -3*ax -2*ay\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #east x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2\n",
        "            \n",
        "            #east y\n",
        "            data[coeffi+1] = ay\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+3\n",
        "            \n",
        "            coeffi+=2\n",
        "            #south x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2*Nx\n",
        "            \n",
        "            #south y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-2*Nx+1\n",
        "            coeffi+=2\n",
        "            \n",
        "            #north x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2*Nx\n",
        "            \n",
        "            #north y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "            \n",
        "        #right\n",
        "        elif i in range(botright+2*Nx,topright,2*Nx):\n",
        "            \n",
        "            #compute constant for this equation\n",
        "            b[i] = kP[0]\n",
        "            b[i+1] = kP[1]\n",
        "            \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = -ax -2*ay  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = -ax -2*ay\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            #west x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2\n",
        "            \n",
        "            #west y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "            #south x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2*Nx\n",
        "            \n",
        "            #south y\n",
        "            data[coeffi+1] = ay\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "            #north x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2*Nx\n",
        "            \n",
        "            #north y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "        else:\n",
        "            #compute constant for this equation\n",
        "            b[i] = kP[0]\n",
        "            b[i+1] = kP[1]\n",
        "         \n",
        "            #INSERT COEFFICIENTS\n",
        "            #centre x\n",
        "            data[coeffi] = ap  \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i\n",
        "            \n",
        "            #centre y\n",
        "            data[coeffi+1] = ap\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "            #east x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2\n",
        "            \n",
        "            #east y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+3\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "            #west x\n",
        "            data[coeffi] = ax \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2\n",
        "            \n",
        "            #west y\n",
        "            data[coeffi+1] = ax \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "            #south x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i-2*Nx\n",
        "            \n",
        "            #south y\n",
        "            data[coeffi+1] = ay\n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i-2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        "            \n",
        "            \n",
        "            #north x\n",
        "            data[coeffi] = ay \n",
        "            row_idx[coeffi] = i\n",
        "            col_idx[coeffi] = i+2*Nx\n",
        "            \n",
        "            #north y\n",
        "            data[coeffi+1] = ay \n",
        "            row_idx[coeffi+1] = i+1\n",
        "            col_idx[coeffi+1] = i+2*Nx+1\n",
        "            \n",
        "            coeffi+=2\n",
        " \n",
        "    A = csr_matrix((data, (row_idx, col_idx)), shape=(dim*M,dim*M))\n",
        "    t = time.time()\n",
        "    v = scipy.sparse.linalg.spsolve(A,b)\n",
        "#     t_solve = time.time()\n",
        "    print('Time to solve the linear system = ', time.time() - t)\n",
        "    \n",
        "    #FIND VELOCITY MAGNITUDE AT EACH CELL\n",
        "    vmag =[]\n",
        "    for i in range(0,len(v),2):\n",
        "        magnitude = sqrt(v[i]**2+v[i+1]**2)\n",
        "        vmag.append(magnitude)\n",
        "    vmag = np.array(vmag)\n",
        "    X,Y = np.meshgrid(np.arange(0,Nx),np.arange(0,Ny))\n",
        "    \n",
        "    vmagplot = np.reshape(vmag, (Nx, Ny))\n",
        "    \n",
        "    plt.figure()\n",
        "#     plt.contourf(X, Y, T_plot, cmap='inferno')\n",
        "    plt.contourf(X,Y,vmagplot,cmap='inferno')\n",
        "    plt.colorbar()\n",
        "    return v,vmag"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "c836cc8a",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "c836cc8a",
        "outputId": "99174dcb-b4a3-42d9-ea69-c8a73ebd3e0e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Time to solve the linear system =  0.2512531280517578\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "Lx=5\n",
        "Ly=1\n",
        "Nx=100\n",
        "Ny=100\n",
        "vis= 10e-6\n",
        "vl = np.array([5,-2])\n",
        "vt = np.array([0,0])\n",
        "vr = np.array([0,0])\n",
        "vb = np.array([0,0])\n",
        "gradP = np.array([-1,0])\n",
        "rho = 997\n",
        "v,vmag=CFD(Lx,Ly,Nx,Ny,vis,vl,vr,vt,vb,rho,gradP)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a8c0375b",
      "metadata": {
        "id": "a8c0375b"
      },
      "source": [
        "## VTK Format\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "9c961807",
      "metadata": {
        "id": "9c961807"
      },
      "outputs": [],
      "source": [
        "from pathlib import Path\n",
        "dir_vtk = Path(\"vtkFiles\")\n",
        "dir_vtk.mkdir(parents=True, exist_ok=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "id": "e46b20bc",
      "metadata": {
        "id": "e46b20bc"
      },
      "outputs": [],
      "source": [
        "preamble = '# vtk DataFile Version 2.0\\nTube Example\\nASCII \\n' \n",
        "Nz = 1\n",
        "dx = Lx/Nx\n",
        "dy = Ly/Ny\n",
        "ycoord = np.arange(0,Ly+dy,dy, dtype=float)\n",
        "xcoord = np.arange(0,Lx+dx,dx, dtype=float)\n",
        "zcoord = np.array([0,1])\n",
        "fname = 'standardVtk.vtk'\n",
        "with open(dir_vtk/fname, \"w\") as f:\n",
        "        f.write(preamble)\n",
        "        f.write('DATASET STRUCTURED_GRID DIMENSIONS %i %i %i\\n'%(Nx+1,Ny+1,Nz))\n",
        "        f.write('POINTS %i float\\n' %((Nx+1)*(Ny+1)))\n",
        "        count = 0\n",
        "            \n",
        "        for y in ycoord:\n",
        "            for x in xcoord:\n",
        "#                 count+=1\n",
        "                f.write('%f %f 0.0 \\n' %(x,y))\n",
        "                \n",
        "        f.write('CELL_DATA %i\\n'%((Nx)*(Ny)))\n",
        "        f.write('SCALARS VelocityMag float 1\\nLOOKUP_TABLE default\\n')\n",
        "        for vel in vmag:\n",
        "            f.write('%f\\n'%vel)\n",
        "            \n",
        "        f.write('VECTORS Velocity float 3\\nLOOKUP_TABLE default\\n')\n",
        "        for i in range(0,len(v),2):\n",
        "             f.write('%f %.1f 0.0\\n'%(v[i],abs(v[i+1])))"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}